<?xml version="1.0"?>
<rdf:RDF
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:spin="http://spinrdf.org/spin#"
    xmlns:sp="http://spinrdf.org/sp#"
    xmlns:owl="http://www.w3.org/2002/07/owl#"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
    xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
    xmlns:spl="http://spinrdf.org/spl#"
  xml:base="http://spinrdf.org/spin">
  <owl:Ontology rdf:about="">
    <owl:imports rdf:resource="http://spinrdf.org/sp"/>
    <owl:versionInfo rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >1.0.0</owl:versionInfo>
    <rdfs:label>SPIN Inferencing Vocabulary</rdfs:label>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >An RDF Schema that can be used to attach constraints and rules to RDFS classes, and to encapsulate reusable SPARQL queries into functions and templates.</rdfs:comment>
  </owl:Ontology>
  <rdfs:Class rdf:ID="Function">
    <spin:constraint>
      <spl:Attribute>
        <spl:minCount rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"
        >0</spl:minCount>
        <spl:predicate>
          <rdf:Property rdf:ID="body"/>
        </spl:predicate>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >the body of the function</rdfs:comment>
        <spl:maxCount rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"
        >1</spl:maxCount>
      </spl:Attribute>
    </spin:constraint>
    <rdfs:subClassOf>
      <rdfs:Class rdf:ID="Module"/>
    </rdfs:subClassOf>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Function</rdfs:label>
    <rdfs:comment>A function type that can be used in SPARQL expressions (e.g. FILTER or LET). Functions are Modules that create a single variable binding. The output RDF graph is the (unchanged) input graph.</rdfs:comment>
  </rdfs:Class>
  <rdfs:Class rdf:ID="ConstraintViolation">
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Constraint violation</rdfs:label>
    <rdfs:comment>An object that can be created by spin:constraints to provide information about a constraint violation.</rdfs:comment>
  </rdfs:Class>
  <rdfs:Class rdf:ID="Modules">
    <spin:constructor>
      <spl:ConstructDefaultValues/>
    </spin:constructor>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Modules</rdfs:label>
    <rdfs:comment>An "artificial" parent class for all Functions and Templates.</rdfs:comment>
  </rdfs:Class>
  <rdfs:Class rdf:ID="LibraryOntology">
    <rdfs:comment>A marker class that can be attached to base URIs (ontologies) to instruct SPIN engines that this ontology only contains a library of SPIN declarations. Library Ontologies should be ignored by SPIN inference engines even if they have been imported by a domain model. For example, a SPIN version of OWL RL may contain all the OWL RL axioms, attached to owl:Thing, but nothing else. However, when executed, these axioms should not be executed over themselves, because we don't want the system to reason about the SPIN triples to speed up things.</rdfs:comment>
    <rdfs:subClassOf rdf:resource="http://www.w3.org/2002/07/owl#Ontology"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Library ontology</rdfs:label>
  </rdfs:Class>
  <rdfs:Class rdf:ID="Template">
    <spin:constraint>
      <spl:Attribute>
        <spl:minCount rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"
        >0</spl:minCount>
        <spl:predicate>
          <rdf:Property rdf:about="#body"/>
        </spl:predicate>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >the body of the Template</rdfs:comment>
        <spl:maxCount rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"
        >1</spl:maxCount>
      </spl:Attribute>
    </spin:constraint>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Template</rdfs:label>
    <rdfs:subClassOf>
      <rdfs:Class rdf:about="#Module"/>
    </rdfs:subClassOf>
    <rdfs:comment>The metaclass of SPIN templates. Instances of this class can represent reusable SPARQL queries that can be supplied with arguments. The output of a module depends on the type of its body query. If the body is a CONSTRUCT query, then the output will be the constructed RDF graph. If the body is an ASK query, then the output will be true or false. If the body is a SELECT query, then the output will be the variable bindings of the first result set row.</rdfs:comment>
  </rdfs:Class>
  <rdfs:Class rdf:about="#Module">
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Module</rdfs:label>
    <rdfs:subClassOf rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>
    <rdfs:comment>An abstract building block of a SPARQL system. A Module can take Arguments as input and applies them on an input RDF Graph. The Arguments should be declared as spin:constraints. A Module can produce an RDF graph and/or new variable bindings as output.</rdfs:comment>
  </rdfs:Class>
  <rdf:Property rdf:ID="returnType">
    <rdfs:domain rdf:resource="#Function"/>
    <rdfs:comment>The return type of a Function, e.g. xsd:string.</rdfs:comment>
    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >return type</rdfs:label>
    <rdfs:subPropertyOf>
      <rdf:Property rdf:ID="systemProperty"/>
    </rdfs:subPropertyOf>
  </rdf:Property>
  <rdf:Property rdf:ID="symbol">
    <rdfs:domain rdf:resource="#Function"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >symbol</rdfs:label>
    <rdfs:comment>The symbol of a function, e.g. "=" for the eq function.</rdfs:comment>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
    <rdfs:subPropertyOf>
      <rdf:Property rdf:about="#systemProperty"/>
    </rdfs:subPropertyOf>
  </rdf:Property>
  <rdf:Property rdf:ID="rule">
    <rdfs:subPropertyOf>
      <rdf:Property rdf:ID="query"/>
    </rdfs:subPropertyOf>
    <rdfs:range rdf:resource="http://spinrdf.org/sp#Construct"/>
    <rdfs:domain rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>
    <rdfs:comment>An inferencing rule attached to a class. Rules are expressed as Construct queries where the variable ?this will be bound to the current instance of the class. These inferences can be used to derive new values from existing values at the instance.</rdfs:comment>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >rule</rdfs:label>
  </rdf:Property>
  <rdf:Property rdf:about="#systemProperty">
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >system property</rdfs:label>
    <rdfs:comment>An "abstract" base property that groups together those system properties that the user will hardly ever need to see in property trees. This property may be dropped in future versions of this ontology - right now it's mainly here for convenience.</rdfs:comment>
  </rdf:Property>
  <rdf:Property rdf:about="#body">
    <rdfs:subPropertyOf>
      <rdf:Property rdf:about="#query"/>
    </rdfs:subPropertyOf>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >body</rdfs:label>
    <rdfs:range rdf:resource="http://spinrdf.org/sp#Query"/>
    <rdfs:comment>The body of a Function or Template. This points to a Query instance. For Functions, this is limited to either ASK or SELECT type queries. If the body is the ASK function then the return value is xsd:boolean. Otherwise, the SELECT query must have a single return variable. The first binding of this SELECT query will be returned as result of the function call.</rdfs:comment>
  </rdf:Property>
  <rdf:Property rdf:ID="violationRoot">
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >violation root</rdfs:label>
    <rdfs:domain rdf:resource="#ConstraintViolation"/>
    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>
    <rdfs:comment>The root resource of the violation (often ?this in the constraint body).</rdfs:comment>
    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>
  </rdf:Property>
  <rdf:Property rdf:ID="labelTemplate">
    <rdfs:domain rdf:resource="#Template"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >label template</rdfs:label>
    <rdfs:comment>A template string for displaying instantiations of a module in human-readable form. The template may contain the argument variable names in curly braces to support substitution. For example, "The number of values of the {?arg1} property."</rdfs:comment>
    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>
  </rdf:Property>
  <rdf:Property rdf:ID="constructor">
    <rdfs:comment>Can be used to attach a "constructor" to a class. A constructor is a SPARQL CONSTRUCT query that can add initial values to the current instance. At execution time, the variable ?this is bound to the current instance. Tools can call constructors of a class and its superclasses when an instance of a class has been created. Constructors will also be used to initialize resources that have received a new rdf:type triple as a result of spin:rules firing.</rdfs:comment>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >constructor</rdfs:label>
    <rdfs:domain rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>
    <rdfs:range rdf:resource="http://spinrdf.org/sp#Construct"/>
    <rdfs:subPropertyOf>
      <rdf:Property rdf:about="#query"/>
    </rdfs:subPropertyOf>
  </rdf:Property>
  <rdf:Property rdf:ID="violationPath">
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >violation path</rdfs:label>
    <rdfs:domain rdf:resource="#ConstraintViolation"/>
    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>
    <rdfs:comment>An optional attribute of ConstraintViolations to provide a path expression from the root resource to the value that is invalid. If this is a URI then the path represents the predicate of a subject/predicate combination. Otherwise it should be a blank node of type sp:Path.</rdfs:comment>
    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>
  </rdf:Property>
  <rdf:Property rdf:ID="abstract">
    <rdfs:comment>Can be set to true to indicate that this module shall not be instantiated. Abstract modules are only there to organize other modules into hierarchies.</rdfs:comment>
    <rdfs:domain rdf:resource="#Module"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >abstract</rdfs:label>
    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>
  </rdf:Property>
  <rdf:Property rdf:ID="constraint">
    <rdfs:comment>Links a class with constraints on its instances. The values of this property are "axioms" expressed as CONSTRUCT or ASK queries where the variable ?this refers to the instances of the surrounding class. ASK queries must evaluate to false for each member of this class - returning true means that the instance ?this violates the constraint. CONSTRUCT queries must create instances of spin:ConstraintViolation to provide details on the reason for the violation.</rdfs:comment>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >constraint</rdfs:label>
    <rdfs:subPropertyOf>
      <rdf:Property rdf:about="#query"/>
    </rdfs:subPropertyOf>
    <rdfs:domain rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>
  </rdf:Property>
  <rdf:Property rdf:ID="ruleIndex">
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >rule index</rdfs:label>
    <rdfs:domain rdf:resource="http://spinrdf.org/sp#Construct"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>
    <rdfs:comment>Can be attached to a spin:rule or template call to specify the order in which a rule shall be fired compared to its siblings. Rules with smaller numbers are executed first. Rules with no ruleIndex will be executed last.</rdfs:comment>
    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>
  </rdf:Property>
  <rdf:Property rdf:about="#query">
    <rdfs:range rdf:resource="http://spinrdf.org/sp#Query"/>
    <rdfs:comment>Can be used to point from any resource to a Query.</rdfs:comment>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >query</rdfs:label>
  </rdf:Property>
  <rdf:Description>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >The first operand to compare.</rdfs:comment>
  </rdf:Description>
  <sp:Variable rdf:ID="_arg4">
    <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >arg4</sp:varName>
  </sp:Variable>
  <sp:Variable rdf:ID="_this">
    <rdfs:comment>A system variable representing the current context instance in a rule or constraint.</rdfs:comment>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >_this</rdfs:label>
    <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >this</sp:varName>
  </sp:Variable>
  <sp:Variable rdf:ID="_arg2">
    <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >arg2</sp:varName>
  </sp:Variable>
  <rdf:Description>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >The (boolean) operand to negate.</rdfs:comment>
  </rdf:Description>
  <sp:Variable rdf:ID="_arg5">
    <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >arg5</sp:varName>
  </sp:Variable>
  <spin:Function rdf:ID="Functions">
    <spin:abstract rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"
    >true</spin:abstract>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Functions</rdfs:label>
    <rdfs:comment>An abstract base class for all defined functions. This class mainly serves as a shared root so that the various instances of the Function metaclass are grouped together.</rdfs:comment>
    <rdfs:subClassOf rdf:resource="#Modules"/>
  </spin:Function>
  <sp:Variable rdf:ID="_arg3">
    <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >arg3</sp:varName>
  </sp:Variable>
  <spin:Template rdf:ID="Templates">
    <spin:abstract rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"
    >true</spin:abstract>
    <rdfs:subClassOf rdf:resource="#Modules"/>
    <rdfs:comment>The abstract base class of all Templates.</rdfs:comment>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Templates</rdfs:label>
  </spin:Template>
  <sp:Variable rdf:ID="_arg1">
    <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >arg1</sp:varName>
  </sp:Variable>
</rdf:RDF>

<!-- Created with TopBraid Composer -->
